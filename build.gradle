plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'io.qameta.allure' version('2.11.2')
    id 'com.diffplug.spotless' version ('6.21.0')
}

group 'ru.talykov.spring'
version '1.0-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_18
targetCompatibility = JavaVersion.VERSION_18

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

ext {
    set('springCloudVersion', "2023.0.0-SNAPSHOT")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'com.google.code.gson:gson:2.10.1'

    implementation 'io.qameta.allure:allure-junit5:2.22.0'

    // Asserts
    implementation 'org.assertj:assertj-core:3.24.2'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

spotless {
    java {
        // Use the default importOrder configuration
        importOrder()
        removeUnusedImports()

        // Cleanthat will refactor your code, but it may break your style: apply it before your formatter
        cleanthat()          // has its own section below

        // Choose one of these formatters.
        googleJavaFormat()   // has its own section below
//        eclipse()            // has its own section below
//        prettier()           // has its own section below
//        clangFormat()        // has its own section below

        formatAnnotations()  // fixes formatting of type annotations, see below
    }
}